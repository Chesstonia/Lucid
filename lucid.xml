<?xml version="1.0" encoding="UTF-8"?>
<project name="lucid" default="all">


    <property file="lucid.properties"/>
    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="128m"/>
    <patternset id="ignored.files">
        <exclude name="**/CVS/**"/>
        <exclude name="**/SCCS/**"/>
        <exclude name="**/RCS/**"/>
        <exclude name="**/rcs/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/.pyc/**"/>
        <exclude name="**/.pyo/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/*.lib/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/.bundle/**"/>
        <exclude name="**/*.rbc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.zip"/>
        <include name="*.apk"/>
        <include name="*.war"/>
        <include name="*.egg"/>
        <include name="*.ear"/>
        <include name="*.ane"/>
        <include name="*.swc"/>
        <include name="*.jar"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
    </patternset>

    <!-- JDK definitions -->

    <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>
    <path id="jdk.classpath.1.7">
        <fileset dir="${jdk.home.1.7}">
            <include name="jre/lib/charsets.jar"/>
            <include name="jre/lib/deploy.jar"/>
            <include name="jre/lib/javaws.jar"/>
            <include name="jre/lib/jce.jar"/>
            <include name="jre/lib/jfr.jar"/>
            <include name="jre/lib/jfxrt.jar"/>
            <include name="jre/lib/jsse.jar"/>
            <include name="jre/lib/management-agent.jar"/>
            <include name="jre/lib/plugin.jar"/>
            <include name="jre/lib/resources.jar"/>
            <include name="jre/lib/rt.jar"/>
            <include name="jre/lib/ext/access-bridge-64.jar"/>
            <include name="jre/lib/ext/dnsns.jar"/>
            <include name="jre/lib/ext/jaccess.jar"/>
            <include name="jre/lib/ext/localedata.jar"/>
            <include name="jre/lib/ext/sunec.jar"/>
            <include name="jre/lib/ext/sunjce_provider.jar"/>
            <include name="jre/lib/ext/sunmscapi.jar"/>
            <include name="jre/lib/ext/zipfs.jar"/>
        </fileset>
    </path>

    <property name="project.jdk.home" value="${jdk.home.1.7}"/>
    <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
    <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>


    <!-- Project Libraries -->

    <path id="library.hamcrest-core-1.3.classpath">
        <pathelement
                location="${basedir}/../../../../Developer/Java/hamcrest-core-1.3/hamcrest-core-1.3.jar"/>
    </path>

    <path id="library.junit-4.11.classpath">
        <pathelement
                location="${basedir}/../../../../Developer/Java/junit-4.11/junit-4.11.jar"/>
    </path>

    <path id="library.logback-1.0.classpath">
        <pathelement
                location="${basedir}/../../../../Developer/Java/logback-1.0.13/logback-classic-1.0.13.jar"/>
        <pathelement
                location="${basedir}/../../../../Developer/Java/logback-1.0.13/logback-core-1.0.13.jar"/>
    </path>

    <path id="library.slf4j_1.7.classpath">
        <pathelement
                location="${basedir}/../../../../Developer/Java/slf4j 1.7.5/slf4j-api-1.7.5.jar"/>
    </path>


    <!-- Global Libraries -->

    <path id="library.hamcrest-core-1.3.classpath">
        <pathelement location="D:/Developer/Java/hamcrest-core-1.3/hamcrest-core-1.3.jar"/>
    </path>

    <path id="library.junit-4.11.classpath">
        <pathelement location="D:/Developer/Java/junit-4.11/junit-4.11.jar"/>
    </path>

    <path id="library.logback-1.0.classpath">
        <pathelement location="D:/Developer/Java/logback-1.0.13/logback-classic-1.0.13.jar"/>
        <pathelement location="D:/Developer/Java/logback-1.0.13/logback-core-1.0.13.jar"/>
    </path>

    <path id="library.slf4j_1.7.classpath">
        <pathelement location="D:/Developer/Java/slf4j 1.7.5/slf4j-api-1.7.5.jar"/>
    </path>
    <!-- Register Custom Compiler Taskdefs -->
    <property name="javac2.home" value="${idea.home}/lib"/>
    <path id="javac2.classpath">
        <pathelement location="${javac2.home}/javac2.jar"/>
        <pathelement location="${javac2.home}/jdom.jar"/>
        <pathelement location="${javac2.home}/asm4-all.jar"/>
        <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
    </path>
    <target name="register.custom.compilers">
        <taskdef name="javac2" classname="com.intellij.ant.Javac2"
                 classpathref="javac2.classpath"/>
        <taskdef name="instrumentIdeaExtensions"
                 classname="com.intellij.ant.InstrumentIdeaExtensions"
                 classpathref="javac2.classpath"/>
    </target>

    <!-- Modules -->


    <!-- Module Humble -->

    <dirname property="module.humble.basedir" file="${ant.file}"/>


    <property name="module.jdk.home.humble" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.humble" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.humble" value="${project.jdk.classpath}"/>

    <property name="compiler.args.humble" value="${compiler.args}"/>

    <property name="humble.output.dir" value="${module.humble.basedir}/out/production/Humble"/>
    <property name="humble.testoutput.dir" value="${module.humble.basedir}/out/test/Humble"/>

    <path id="humble.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="humble.module.production.classpath">
        <path refid="${module.jdk.classpath.humble}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="humble.runtime.production.module.classpath">
        <pathelement location="${humble.output.dir}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="humble.module.classpath">
        <path refid="${module.jdk.classpath.humble}"/>
        <pathelement location="${humble.output.dir}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="humble.runtime.module.classpath">
        <pathelement location="${humble.testoutput.dir}"/>
        <pathelement location="${humble.output.dir}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>


    <patternset id="excluded.from.module.humble">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.humble">
        <patternset refid="excluded.from.module.humble"/>
    </patternset>

    <path id="humble.module.sourcepath">
        <dirset dir="${module.humble.basedir}/Humble">
            <include name="src"/>
        </dirset>
    </path>

    <path id="humble.module.test.sourcepath">
        <dirset dir="${module.humble.basedir}/Humble">
            <include name="tests"/>
        </dirset>
    </path>


    <target name="compile.module.humble"
            depends="compile.module.humble.production,compile.module.humble.tests"
            description="Compile module Humble"/>

    <target name="compile.module.humble.production" depends="register.custom.compilers"
            description="Compile module Humble; production classes">
        <mkdir dir="${humble.output.dir}"/>
        <javac2 destdir="${humble.output.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${module.jdk.bin.humble}/javac">
            <compilerarg line="${compiler.args.humble}"/>
            <bootclasspath refid="humble.module.bootclasspath"/>
            <classpath refid="humble.module.production.classpath"/>
            <src refid="humble.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.humble"/>
        </javac2>

        <copy todir="${humble.output.dir}">
            <fileset dir="${module.humble.basedir}/Humble/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.humble.tests"
            depends="register.custom.compilers,compile.module.humble.production"
            description="compile module Humble; test classes" unless="skip.tests">
        <mkdir dir="${humble.testoutput.dir}"/>
        <javac2 destdir="${humble.testoutput.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${module.jdk.bin.humble}/javac">
            <compilerarg line="${compiler.args.humble}"/>
            <bootclasspath refid="humble.module.bootclasspath"/>
            <classpath refid="humble.module.classpath"/>
            <src refid="humble.module.test.sourcepath"/>
            <patternset refid="excluded.from.compilation.humble"/>
        </javac2>

        <copy todir="${humble.testoutput.dir}">
            <fileset dir="${module.humble.basedir}/Humble/tests">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean.module.humble" description="cleanup module">
        <delete dir="${humble.output.dir}"/>
        <delete dir="${humble.testoutput.dir}"/>
    </target>


    <!-- Module Maxx -->

    <dirname property="module.maxx.basedir" file="${ant.file}"/>


    <property name="module.jdk.home.maxx" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.maxx" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.maxx" value="${project.jdk.classpath}"/>

    <property name="compiler.args.maxx" value="${compiler.args}"/>

    <property name="maxx.output.dir" value="${module.maxx.basedir}/out/production/Maxx"/>
    <property name="maxx.testoutput.dir" value="${module.maxx.basedir}/out/test/Maxx"/>

    <path id="maxx.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="maxx.module.production.classpath">
        <path refid="${module.jdk.classpath.maxx}"/>
        <pathelement location="${humble.output.dir}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="maxx.runtime.production.module.classpath">
        <pathelement location="${maxx.output.dir}"/>
        <path refid="humble.runtime.production.module.classpath"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="maxx.module.classpath">
        <path refid="${module.jdk.classpath.maxx}"/>
        <pathelement location="${maxx.output.dir}"/>
        <pathelement location="${humble.testoutput.dir}"/>
        <pathelement location="${humble.output.dir}"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="maxx.runtime.module.classpath">
        <pathelement location="${maxx.testoutput.dir}"/>
        <pathelement location="${maxx.output.dir}"/>
        <path refid="humble.runtime.module.classpath"/>
        <path refid="library.hamcrest-core-1.3.classpath"/>
        <path refid="library.junit-4.11.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>


    <patternset id="excluded.from.module.maxx">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.maxx">
        <patternset refid="excluded.from.module.maxx"/>
    </patternset>

    <path id="maxx.module.sourcepath">
        <dirset dir="${module.maxx.basedir}/Maxx">
            <include name="src"/>
        </dirset>
    </path>

    <path id="maxx.module.test.sourcepath">
        <dirset dir="${module.maxx.basedir}/Maxx">
            <include name="tests"/>
        </dirset>
    </path>


    <target name="compile.module.maxx"
            depends="compile.module.maxx.production,compile.module.maxx.tests"
            description="Compile module Maxx"/>

    <target name="compile.module.maxx.production"
            depends="register.custom.compilers,compile.module.humble"
            description="Compile module Maxx; production classes">
        <mkdir dir="${maxx.output.dir}"/>
        <javac2 destdir="${maxx.output.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${module.jdk.bin.maxx}/javac">
            <compilerarg line="${compiler.args.maxx}"/>
            <bootclasspath refid="maxx.module.bootclasspath"/>
            <classpath refid="maxx.module.production.classpath"/>
            <src refid="maxx.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.maxx"/>
        </javac2>

        <copy todir="${maxx.output.dir}">
            <fileset dir="${module.maxx.basedir}/Maxx/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.maxx.tests"
            depends="register.custom.compilers,compile.module.maxx.production"
            description="compile module Maxx; test classes" unless="skip.tests">
        <mkdir dir="${maxx.testoutput.dir}"/>
        <javac2 destdir="${maxx.testoutput.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${module.jdk.bin.maxx}/javac">
            <compilerarg line="${compiler.args.maxx}"/>
            <bootclasspath refid="maxx.module.bootclasspath"/>
            <classpath refid="maxx.module.classpath"/>
            <src refid="maxx.module.test.sourcepath"/>
            <patternset refid="excluded.from.compilation.maxx"/>
        </javac2>

        <copy todir="${maxx.testoutput.dir}">
            <fileset dir="${module.maxx.basedir}/Maxx/tests">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="clean.module.maxx" description="cleanup module">
        <delete dir="${maxx.output.dir}"/>
        <delete dir="${maxx.testoutput.dir}"/>
    </target>


    <!-- Module Lucid -->

    <dirname property="module.lucid.basedir" file="${ant.file}"/>


    <property name="module.jdk.home.lucid" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.lucid" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.lucid" value="${project.jdk.classpath}"/>

    <property name="compiler.args.lucid" value="${compiler.args}"/>

    <property name="lucid.output.dir" value="${module.lucid.basedir}/out/production/Lucid"/>
    <property name="lucid.testoutput.dir" value="${module.lucid.basedir}/out/test/Lucid"/>

    <path id="lucid.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>

    <path id="lucid.module.production.classpath">
        <path refid="${module.jdk.classpath.lucid}"/>
        <pathelement location="${humble.output.dir}"/>
        <pathelement location="${maxx.output.dir}"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="lucid.runtime.production.module.classpath">
        <pathelement location="${lucid.output.dir}"/>
        <path refid="humble.runtime.production.module.classpath"/>
        <path refid="maxx.runtime.production.module.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="lucid.module.classpath">
        <path refid="${module.jdk.classpath.lucid}"/>
        <pathelement location="${lucid.output.dir}"/>
        <pathelement location="${humble.testoutput.dir}"/>
        <pathelement location="${humble.output.dir}"/>
        <pathelement location="${maxx.testoutput.dir}"/>
        <pathelement location="${maxx.output.dir}"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>

    <path id="lucid.runtime.module.classpath">
        <pathelement location="${lucid.testoutput.dir}"/>
        <pathelement location="${lucid.output.dir}"/>
        <path refid="humble.runtime.module.classpath"/>
        <path refid="maxx.runtime.module.classpath"/>
        <path refid="library.logback-1.0.classpath"/>
        <path refid="library.slf4j_1.7.classpath"/>
    </path>


    <patternset id="excluded.from.module.lucid">
        <patternset refid="ignored.files"/>
    </patternset>

    <patternset id="excluded.from.compilation.lucid">
        <patternset refid="excluded.from.module.lucid"/>
    </patternset>

    <path id="lucid.module.sourcepath">
        <dirset dir="${module.lucid.basedir}">
            <include name="src"/>
        </dirset>
    </path>


    <target name="compile.module.lucid"
            depends="compile.module.lucid.production,compile.module.lucid.tests"
            description="Compile module Lucid"/>

    <target name="compile.module.lucid.production"
            depends="register.custom.compilers,compile.module.humble,compile.module.maxx"
            description="Compile module Lucid; production classes">
        <mkdir dir="${lucid.output.dir}"/>
        <javac2 destdir="${lucid.output.dir}" debug="${compiler.debug}"
                nowarn="${compiler.generate.no.warnings}"
                memorymaximumsize="${compiler.max.memory}" fork="true"
                executable="${module.jdk.bin.lucid}/javac">
            <compilerarg line="${compiler.args.lucid}"/>
            <bootclasspath refid="lucid.module.bootclasspath"/>
            <classpath refid="lucid.module.production.classpath"/>
            <src refid="lucid.module.sourcepath"/>
            <patternset refid="excluded.from.compilation.lucid"/>
        </javac2>

        <copy todir="${lucid.output.dir}">
            <fileset dir="${module.lucid.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <target name="compile.module.lucid.tests"
            depends="register.custom.compilers,compile.module.lucid.production"
            description="compile module Lucid; test classes" unless="skip.tests"/>

    <target name="clean.module.lucid" description="cleanup module">
        <delete dir="${lucid.output.dir}"/>
        <delete dir="${lucid.testoutput.dir}"/>
    </target>

    <target name="init" description="Build initialization">
        <!-- Perform any build initialization in this target -->
    </target>

    <target name="clean"
            depends="clean.module.humble, clean.module.maxx, clean.module.lucid, clean.artifact.javafxapp"
            description="cleanup all"/>

    <target name="build.modules"
            depends="init, clean, compile.module.humble, compile.module.maxx, compile.module.lucid"
            description="build all modules"/>

    <target name="init.artifacts">
        <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
        <property name="artifact.output.javafxapp" value="${basedir}/out/artifacts/JavaFXApp"/>
        <mkdir dir="${artifacts.temp.dir}"/>
        <property name="artifact.temp.output.JavaFXApp"
                  value="${artifacts.temp.dir}/JavaFXApp.jar"/>
        <taskdef resource="com/sun/javafx/tools/ant/antlib.xml"
                 uri="javafx:com.sun.javafx.tools.ant"
                 classpath="${jdk.home.1.7}/lib/ant-javafx.jar"/>
    </target>

    <target name="clean.artifact.javafxapp" description="clean JavaFXApp artifact output">
        <delete dir="${artifact.output.javafxapp}"/>
    </target>

    <target name="artifact.javafxapp" depends="init.artifacts, compile.module.lucid"
            description="Build &#39;JavaFXApp&#39; artifact"
            xmlns:fx="javafx:com.sun.javafx.tools.ant">
        <mkdir dir="${artifact.output.javafxapp}"/>
        <copy todir="${artifact.temp.output.JavaFXApp}">
            <fileset dir="${lucid.output.dir}"/>
        </copy>
        <fx:fileset id="all_but_JavaFXApp" dir="${artifact.temp.output.JavaFXApp}"
                    includes="**/*.jar">
            <exclude name="JavaFXApp.jar"/>
        </fx:fileset>
        <fx:fileset id="all_JavaFXApp" dir="${artifact.temp.output.JavaFXApp}"
                    includes="**/*.jar"/>
        <fx:application id="JavaFXApp_id" name="JavaFXApp" mainClass="sample.Main"/>
        <fx:jar destfile="${artifact.temp.output.JavaFXApp}\JavaFXApp.jar">
            <fx:application refid="JavaFXApp_id"/>
            <fileset dir="${artifact.temp.output.JavaFXApp}" excludes="**/*.jar"/>
            <fx:resources>
                <fx:fileset refid="all_but_JavaFXApp"/>
            </fx:resources>
        </fx:jar>
        <fx:deploy width="600" height="400" updatemode="background"
                   outdir="${artifact.temp.output.JavaFXApp}\deploy" outfile="JavaFXApp">
            <fx:application refid="JavaFXApp_id"/>
            <fx:resources>
                <fx:fileset refid="all_JavaFXApp"/>
            </fx:resources>
        </fx:deploy>
        <copy todir="${artifact.output.javafxapp}">
            <fileset dir="${artifact.temp.output.JavaFXApp}/deploy"/>
        </copy>
        <delete includeemptydirs="true">
            <fileset dir="${artifact.temp.output.JavaFXApp}"/>
        </delete>
    </target>

    <target name="build.all.artifacts" depends="artifact.javafxapp"
            description="Build all artifacts">

        <!-- Delete temporary files -->
        <delete dir="${artifacts.temp.dir}"/>
    </target>

    <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>
